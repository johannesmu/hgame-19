{"version":3,"sources":["classes.js","functions.js","app.js"],"names":["Payload","[object Object]","player","windSpeed","this","x","y","rect","getTransformedBounds","graphic","createjs","Graphics","beginFill","setStrokeStyle","beginStroke","drawRect","width","height","sprite","Shape","wind","Block","canvas","initX","initY","getHeight","regX","regY","Math","round","random","initApp","initStage","resizeCanvas","gameContainer","document","getElementById","containerHeight","clientHeight","containerWidth","clientWidth","setAttribute","canvasData","instance","elm","Stage","initTimer","rate","timer","Ticker","useRAF","framerate","setupPlayer","loadImage","then","image","spriteSheetData","images","frames","animations","fly","dropping","dead","spriteSheet","SpriteSheet","animation","Sprite","catch","err","playerDefault","url","Promise","resolve","reject","Image","addEventListener","src","getControlsConfig","request","XMLHttpRequest","overrideMimeType","onreadystatechange","rs","readyState","status","data","JSON","parse","responseText","open","send","managePayLoads","payLoadsArray","gameCanvas","gameStage","forEach","payload","dropRate","origin","graphics","command","stageX","stageY","w","h","obj","shift","removeChild","console","log","manageBlocks","blocksArray","block","removed","manageTargets","setWindDirection","num","getRandom","changeWindIndicator","elem","direction","classList","remove","add","limit","debug","windDirection","playerBounds","playerMovementRate","playerAlive","stage","info","payLoads","Array","blocks","window","querySelector","windowWidth","canvasElement","playerObj","scaleX","scaleY","gotoAndPlay","addChild","update","config","event","code","drop","length","push","down","up","on","innerText","getMeasuredFPS","toFixed","getTicks","oldDirection","newDirection"],"mappings":"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","file":"../main.min.js","sourcesContent":["class Payload {\r\n  constructor (player,windSpeed) {\r\n    this.x = player.x;\r\n    this.y = player.y;\r\n    this.rect = player.getTransformedBounds();\r\n    let graphic = new createjs.Graphics();\r\n    graphic.beginFill(\"olivedrab\");\r\n    graphic.setStrokeStyle(2);\r\n    graphic.beginStroke(\"white\");\r\n    graphic.drawRect(this.x + (this.rect.width * 0.7) ,this.y +  (this.rect.height * 0.7), 20, 10);\r\n    this.sprite = new createjs.Shape(graphic);\r\n    this.wind = windSpeed;\r\n  }\r\n}\r\n\r\nclass Block {\r\n  constructor ( canvas ) {\r\n    this.initX = 0;\r\n    this.initY = canvas.height;\r\n    this.height = this.getHeight();\r\n    const graphic = new createjs.Graphics();\r\n    graphic.beginFill('red');\r\n    graphic.drawRect(0, 0, 100, this.height + 300 );\r\n    this.sprite = new createjs.Shape( graphic );\r\n    this.sprite.x = -100;\r\n    this.sprite.y = canvas.height - 100;\r\n    this.sprite.regX = 0;\r\n    this.sprite.regY = this.height;\r\n  }\r\n  getHeight() {\r\n    return Math.round( Math.random() * 400 );\r\n  }\r\n}","function initApp() {\r\n  initStage();\r\n}\r\n\r\nfunction resizeCanvas() {\r\n  //get container width and height\r\n  const gameContainer = document.getElementById('game-container');\r\n  const containerHeight = gameContainer.clientHeight;\r\n  const containerWidth = gameContainer.clientWidth;\r\n  // set canvas width and height\r\n  const canvas = document.getElementById('main-canvas');\r\n  canvas.setAttribute('width', containerWidth);\r\n  canvas.setAttribute('height', (containerHeight - 5));\r\n  // return canvas object + data\r\n  canvasData = { \"instance\": canvas, \"width\": containerWidth, \"height\": containerHeight };\r\n  return canvasData;\r\n}\r\n\r\nfunction initStage(elm) {\r\n  // initialise canvas\r\n  const stage = new createjs.Stage(elm);\r\n  return stage;\r\n}\r\n\r\nfunction initTimer(rate) {\r\n  const timer = createjs.Ticker;\r\n  timer.useRAF = true;\r\n  timer.framerate = rate;\r\n  return timer;\r\n}\r\n\r\nfunction setupPlayer() {\r\n  return loadImage(\"assets/sprites/player/sprite2X.png\")\r\n    .then((image) => {\r\n      const spriteSheetData = {\r\n        images: [image],\r\n        frames: {\r\n          width: 400,\r\n          height: 300\r\n        },\r\n        animations: {\r\n          fly: [0, 49],\r\n          dropping: [49],\r\n          dead: [7]\r\n        }\r\n      };\r\n      const spriteSheet = new createjs.SpriteSheet(spriteSheetData);\r\n      const animation = new createjs.Sprite(spriteSheet, \"fly\");\r\n      const player = new createjs.Sprite(spriteSheet, animation);\r\n      return player;\r\n    })\r\n    .catch((err) => {\r\n      return null;\r\n    })\r\n}\r\n\r\nfunction playerDefault() {\r\n\r\n}\r\n\r\nfunction loadImage(url) {\r\n  return new Promise((resolve, reject) => {\r\n    const image = new Image();\r\n    image.addEventListener('load', () => {\r\n      resolve(image);\r\n    })\r\n    image.addEventListener('error', (err) => reject(err))\r\n    image.src = url;\r\n  })\r\n}\r\n\r\nfunction getControlsConfig(url) {\r\n  //return a promise\r\n  return new Promise((resolve, reject) => {\r\n    const request = new XMLHttpRequest();\r\n    request.overrideMimeType('text/json');\r\n    request.onreadystatechange = () => {\r\n      const rs = request.readyState;\r\n      if (rs == 4 || rs == 0) {\r\n        if (request.status == 200) {\r\n          let data = (JSON.parse(request.responseText)) ? JSON.parse(request.responseText) : false;\r\n          resolve(data)\r\n        }\r\n        else {\r\n          reject(false);\r\n        }\r\n      }\r\n    }\r\n    request.open('GET', url);\r\n    request.send();\r\n  })\r\n}\r\n\r\n// function createPayload(player) {\r\n//   // get player position\r\n//   const pX = player.x;\r\n//   const pY = player.y;\r\n//   rect = player.getTransformedBounds();\r\n//   // spawn a payload\r\n//   const graphic = new createjs.Graphics();\r\n//   graphic.beginFill(\"white\");\r\n//   graphic.drawRect(pX + (rect.width * 0.7) , pY +  (rect.height * 0.7), 20, 10);\r\n//   const load = new createjs.Shape(graphic);\r\n//   return load;\r\n// }\r\n\r\nfunction managePayLoads(payLoadsArray, gameCanvas, gameStage) {\r\n  payLoadsArray.forEach(\r\n    (payload) => {\r\n      payload.sprite.x = payload.sprite.x + payload.wind;\r\n      payload.sprite.y = payload.sprite.y + dropRate;\r\n      // if payload is outside the canvas\r\n      // console.log( payload.localToGlobal(payload.x,payload.y) );\r\n      let origin = payload.sprite.graphics.command;\r\n      let stageX = origin.x + payload.sprite.x;\r\n      let stageY = origin.y + payload.sprite.y;\r\n      if (stageX > gameCanvas.width || stageX + origin.w < 0 || stageY + origin.h > gameCanvas.height) {\r\n        let obj = payLoadsArray.shift();\r\n        gameStage.removeChild(obj.sprite);\r\n        console.log('payload removed');\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nfunction manageBlocks( blocksArray, gameCanvas, gameStage ) {\r\n  blocksArray.forEach( (block) => {\r\n    block.sprite.x = block.sprite.x + 2;\r\n    if( block.sprite.x > gameCanvas.width ) {\r\n      let removed = blocksArray.shift();\r\n      gameStage.removeChild( removed.sprite );\r\n      console.log('objec removed');\r\n    }\r\n  })\r\n}\r\n\r\n\r\nfunction manageTargets() {\r\n\r\n}\r\n\r\nfunction setWindDirection() {\r\n  const num = getRandom(100);\r\n  if( num < 25 ) {\r\n    return 2;\r\n  }\r\n  else if( num >=25 && num < 50 ) {\r\n    return 1;\r\n  }\r\n  else if( num >= 50 && num < 75 ) {\r\n    return -1;\r\n  }\r\n  else {\r\n    return -2;\r\n  }\r\n}\r\n\r\nfunction changeWindIndicator( elem, direction ) {\r\n  switch( direction ) {\r\n    case 1 :\r\n      elem.classList.remove('left');\r\n      elem.classList.add('right');\r\n      elem.classList.add('half');\r\n      break;\r\n    case 2 :\r\n      elem.classList.remove('left');\r\n      elem.classList.remove('half');\r\n      elem.classList.add('right');\r\n      break;\r\n    case -1 :\r\n      elem.classList.remove('right');\r\n      elem.classList.add('left');\r\n      elem.classList.add('half');\r\n      break;\r\n    case -2 :\r\n      elem.classList.remove('right');\r\n      elem.classList.remove('half');\r\n      elem.classList.add('left');\r\n      break;\r\n    default: \r\n      break;\r\n  }\r\n}\r\n\r\nfunction getRandom(limit) {\r\n  return Math.round(Math.random() * limit);\r\n}","const debug = 1;\r\nlet windDirection = 1;\r\nlet player = null;\r\nlet playerBounds = null;\r\nlet playerMovementRate = 10;\r\nlet dropRate = 4;\r\nlet playerAlive = true;\r\nlet stage = null;\r\nlet canvas = null;\r\nlet info = null;\r\nlet payLoads = new Array();\r\nlet blocks = new Array();\r\n\r\n//in case window gets resized\r\nwindow.addEventListener('resize', () => {\r\n  canvas = resizeCanvas();\r\n});\r\n\r\nwindow.addEventListener('load', () => {\r\n  canvas = resizeCanvas();\r\n  initApp();\r\n  info = document.querySelector('#info');\r\n  const windowWidth = document.querySelector('#game-container').clientWidth;\r\n  const windowHeight = document.querySelector('#game-container').clientHeight;\r\n  const canvasElement = document.querySelector('#main-canvas');\r\n  stage = initStage(canvasElement);\r\n  setupPlayer()\r\n    .then((playerObj) => {\r\n      player = playerObj;\r\n      player.x = windowWidth / 2;\r\n      player.y = 100;\r\n      player.scaleX = 0.3;\r\n      player.scaleY = 0.3;\r\n      playerBounds = player.getTransformedBounds();\r\n      player.gotoAndPlay('fly');\r\n      stage.addChild(player);\r\n      stage.update();\r\n    });\r\n\r\n  getControlsConfig('data/controls.json')\r\n    .then((config) => {\r\n      if (config) {\r\n        window.addEventListener('keydown', (event) => {\r\n          const code = event.code;\r\n          if (code == config.drop) {\r\n            // console.log('dropping');\r\n            if (payLoads.length < 2) {\r\n              // let payload = createPayload(player);\r\n              const payload = new Payload( player, windDirection );\r\n              player.gotoAndPlay('dropping');\r\n              stage.addChild(payload.sprite);\r\n              payLoads.push(payload);\r\n              player.gotoAndPlay('fly');\r\n            }\r\n          }\r\n          else if (code == config.down) {\r\n            player.y = (player.y < (canvas.height - playerBounds.height) ) ? player.y + playerMovementRate: player.y;\r\n          }\r\n          else if (code == config.up) {\r\n            player.y = (player.y > 60)  ? player.y - playerMovementRate : player.y;\r\n          }\r\n        });\r\n        window.addEventListener('touchstart', () => {\r\n          if (payLoads.length < 2) {\r\n            const payload = new Payload( player, windDirection );\r\n            player.gotoAndPlay('dropping');\r\n            stage.addChild(payload.sprite);\r\n            payLoads.push(payload);\r\n            player.gotoAndPlay('fly');\r\n          }\r\n        })\r\n      }\r\n    })\r\n    .catch(() => { })\r\n\r\n  // initialise timer\r\n  const timer = initTimer(60);\r\n  timer.on('tick', () => {\r\n    // frame rate debug info\r\n    info.innerText = (debug == 1 ) ? timer.getMeasuredFPS().toFixed(2) : '';\r\n    // manage payloads animation and removal\r\n    managePayLoads(payLoads, canvas, stage);\r\n    // create block using random timing\r\n    if(  timer.getTicks() % 400  == 0  ) {\r\n      const block = new Block(canvas);\r\n      console.log(block);\r\n      stage.addChild(block.sprite);\r\n      blocks.push(block);\r\n    }\r\n    manageBlocks( blocks, canvas, stage );\r\n    // setting wind direction\r\n    if(  timer.getTicks() % (100 + getRandom(200)) == 0  ) {\r\n      let oldDirection = windDirection;\r\n      let newDirection = setWindDirection();\r\n      if( oldDirection != newDirection ) {\r\n        windDirection = newDirection;\r\n        changeWindIndicator( document.querySelector('.wind'), windDirection )\r\n      }      \r\n    }\r\n    stage.update();\r\n  })\r\n})"]}