{"version":3,"sources":["app.js"],"names":["window","addEventListener","resizeCanvas","initGame","readScore","saveScore","onKeyDown","onKeyUp","stage","createjs","Stage","Touch","enable","width","height","player","playerheight","tween","mouseisdown","timer","Ticker","scale","isalive","score","highscore","restart","interval","obspeed","obstacles","Array","canvas","document","getElementById","container","ww","offsetWidth","wh","offsetHeight","update","time","setRestart","Date","getTime","showMenu","on","onTick","this","setFPS","onStageClick","onStageMouseUp","setupPlayer","intializeObstacles","resetGame","location","reload","command","localStorage","setItem","err","getItem","i","obslist","length","obs","Bitmap","obsfolder","scaleX","scaleY","get","getTransformedBounds","e","keyCode","spriteSheet","SpriteSheet","images","frames","animations","fly","dead","animation","Sprite","x","y","regX","regY","gotoAndPlay","name","addChild","getPaused","killPlayer","TweenLite","to","ease","Power0","easeIn","manageObstacles","showScore","moveBackground","gotoAndStop","stopheight","setTimeout","stopGame","setPaused","randomNumber","limit","rounding","rn","Math","random","floor","createObstacle","num","size","ypos","space","getTicks","obstacle","push","addChildAt","pos","obswidth","addScore","removeChild","shift","checkCollision","show","label","innerHTML","style","visibility","obj1","obj2","ndgmr","checkPixelCollision","console","log","storedscore","bgposition","elm","position","backgroundPosition","navigator","app","exitApp"],"mappings":"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","file":"../main.min.js","sourcesContent":["\r\nwindow.addEventListener(\"load\", function () {\r\n    //adjust canvas size\r\n    resizeCanvas();\r\n    //start game\r\n    initGame();\r\n    //read score from storage\r\n    readScore();\r\n});\r\n//when game is closed\r\nwindow.addEventListener(\"unload\", function () {\r\n    //set restart to false\r\n    saveScore();\r\n});\r\n//when window is reloaded\r\nwindow.addEventListener(\"reload\", function () {\r\n    //saveScore();\r\n});\r\n//when window is resized\r\nwindow.addEventListener(\"resize\", resizeCanvas, false);\r\n//listen for keydown so game can be played using space bar\r\nwindow.addEventListener(\"keydown\", onKeyDown);\r\nwindow.addEventListener(\"keyup\", onKeyUp);\r\n\r\n\r\nvar stage = new createjs.Stage(\"gamecanvas\");\r\n//support touch devices\r\ncreatejs.Touch.enable(stage);\r\n\r\n////////////////variables used in the game need to be declared here\r\n//so they can be shared/accessed by various functions in the game\r\nvar mouseisdown = false;\r\n//create a reference for our timer\r\nvar timer = createjs.Ticker;\r\n//canvas dimensions\r\nvar width;\r\nvar height;\r\n//reference used to refer to the player\r\nvar player;\r\n//\r\nvar scale = 0.8;\r\nvar isalive = true;\r\nvar playerheight;\r\nvar score = 0;\r\nvar highscore = 0;\r\nvar tween;\r\nvar restart = false;\r\n\r\n//interval controls how often obstacles appear\r\n//in ticks, eg create an obstacle every x number of ticks\r\n//our game is running 60 ticks per second\r\n//250 is easy 150 is hard\r\nvar interval = 250;\r\n//how fast the obstacles move in pixels/tick\r\nvar obspeed = 2;\r\n//an array to keep track of obstacles in the game, so\r\n//they can be removed when they are out of sight (left of stage)\r\nvar obstacles = new Array();\r\n\r\n//reference path where all obstacles images are stored\r\nobsfolder = \"assets/images/\";\r\n\r\n//list the names of obstacle image files here\r\nobslist = [\"obs_tv.png\", \"obs_radio.png\",\r\n    \"obs_camera.png\", \"obs_light.png\",\r\n    \"obs_mic.png\"\r\n];\r\n\r\n//////////////////////////game functions\r\n//resize the canvas\r\nfunction resizeCanvas() {\r\n    canvas = document.getElementById(\"gamecanvas\");\r\n    container = document.getElementById(\"gamecontainer\");\r\n    ww = container.offsetWidth;\r\n    wh = container.offsetHeight;\r\n    canvas.width = container.offsetWidth;\r\n    canvas.height = wh - 50;\r\n    width = canvas.width;\r\n    height = canvas.height;\r\n    stage.update();\r\n    //if screen is small set player to smaller scale\r\n    if (width <= 480) {\r\n        scale = 0.6;\r\n    }\r\n}\r\n//start game for the first time\r\nfunction initGame() {\r\n    time = setRestart(\"get\") - new Date().getTime();\r\n    if (time > 10 * 2000) {\r\n        showMenu(true, \"start\");\r\n    }\r\n    //set onTick to be executed every tick of the timer\r\n    timer.on(\"tick\", onTick, this);\r\n    //set the timer to run at 60fps\r\n    timer.setFPS(60);\r\n    //add a listener for everytime the stage is clicked/tapped\r\n    stage.addEventListener(\"stagemousedown\", onStageClick);\r\n    //add a listener for everytime mouse/tap is released\r\n    stage.on(\"stagemouseup\", onStageMouseUp);\r\n    //create the player\r\n    setupPlayer();\r\n    //initialise the obstacles\r\n    intializeObstacles();\r\n}\r\n//function to reset the game\r\nfunction resetGame() {\r\n    //set restart to true so we know the game is being restarted\r\n    if (setRestart(\"set\") == \"success\") {\r\n        //reload the page to reset game\r\n        window.location.reload();\r\n    }\r\n}\r\n\r\nfunction setRestart(command) {\r\n    if (command == \"set\") {\r\n        try {\r\n            window.localStorage.setItem(\"timestamp\", new Date().getTime());\r\n            return \"success\";\r\n        } catch (err) {\r\n            return \"error\";\r\n        }\r\n    } else if (command == \"get\") {\r\n        try {\r\n            time = window.localStorage.getItem(\"timestamp\");\r\n            return time;\r\n        } catch (err) {\r\n            return \"error\";\r\n        }\r\n    }\r\n}\r\n//function to initialise the obstacles\r\nfunction intializeObstacles() {\r\n    //create a loop to go through all the obstacles\r\n    for (i = 0; i < obslist.length; i++) {\r\n        //load images of all obstacles\r\n        obs = new createjs.Bitmap(obsfolder + obslist[i]);\r\n        //scale the obstacle\r\n        obs.scaleX = scale * 2;\r\n        obs.scaleY = scale * 2;\r\n        //measure the size of the obstacle after scaling\r\n        get = obs.getTransformedBounds();\r\n    }\r\n}\r\n\r\nfunction onStageClick(e) {\r\n    //if player is still alive, set mouseisdown to true\r\n    //this will animate it upwards in the onTick() function\r\n    if (isalive) {\r\n        mouseisdown = true;\r\n    }\r\n}\r\n\r\nfunction onStageMouseUp() {\r\n    mouseisdown = false;\r\n}\r\n\r\nfunction onKeyDown(e) {\r\n    //if spacebar is pressed\r\n    if (e.keyCode == 32) {\r\n        mouseisdown = true;\r\n    }\r\n}\r\n\r\nfunction onKeyUp() {\r\n    mouseisdown = false;\r\n}\r\n\r\nfunction setupPlayer() {\r\n    var data = {\r\n        images: [\"assets/sprites/bird.png\"],\r\n        frames: {\r\n            width: 200,\r\n            height: 120\r\n        },\r\n        animations: {\r\n            fly: [0, 3],\r\n            dead: [5]\r\n        }\r\n    };\r\n    var spriteSheet = new createjs.SpriteSheet(data);\r\n    var animation = new createjs.Sprite(spriteSheet, \"fly\");\r\n    player = new createjs.Sprite(spriteSheet, animation);\r\n    player.x = width * .3;\r\n    player.y = height / 2;\r\n    player.scaleX = scale;\r\n    player.scaleY = scale;\r\n    player.regX = 100;\r\n    player.regY = 80;\r\n    player.gotoAndPlay(\"fly\");\r\n    player.name = \"player\";\r\n    stage.addChild(player);\r\n    stage.update();\r\n}\r\n\r\n//this function gets run every tick of the timer\r\n//if timer is 60fps, this function gets called 60 times/sec\r\nfunction onTick() {\r\n    //check if game is paused\r\n    if (timer.getPaused() == false) {\r\n        //if not paused, if player hits the top or the bottom of screen\r\n        if (player.y < 60 || player.y >= height - 50) {\r\n            killPlayer();\r\n        }\r\n        //if mouse is not pressed\r\n        if (mouseisdown == false) {\r\n            tween = TweenLite.to(player, 3, {\r\n                y: height,\r\n                ease: Power0.easeIn\r\n            });\r\n        }\r\n        //if mouseisdown is true, animate upwards towards\r\n        //the top of the screen\r\n        else {\r\n            tween = TweenLite.to(player, 3, {\r\n                y: 0,\r\n                ease: Power0.easeIn\r\n            });\r\n        }\r\n        manageObstacles();\r\n        showScore();\r\n    }\r\n    stage.update();\r\n    moveBackground(\"gamebg\");\r\n}\r\n\r\nfunction killPlayer() {\r\n    if (isalive == true) {\r\n        player.gotoAndStop(\"dead\");\r\n        isalive = false;\r\n        playerheight = player.getTransformedBounds().height;\r\n        stopheight = playerheight + 150;\r\n        var restarttimer = window.setTimeout(function () {\r\n            stopGame();\r\n            //clearTimeOut(restarttimer);\r\n        }, 3000);\r\n    }\r\n}\r\n\r\nfunction stopGame() {\r\n    saveScore();\r\n    timer.setPaused(true);\r\n    //show the restart button which will call resetGame()\r\n    showMenu(true, \"Restart\");\r\n}\r\n\r\n//this function generates a semi-random number\r\nfunction randomNumber(limit, rounding) {\r\n    rn = Math.random() * limit;\r\n    //if rounding is set to true then\r\n    //return a rounded number\r\n    if (rounding == true) {\r\n        return Math.floor(rn);\r\n    }\r\n    //if rouding is false\r\n    else {\r\n        return rn;\r\n    }\r\n}\r\n//this function creates an obstacle\r\nfunction createObstacle() {\r\n    //generate random number\r\n    num = randomNumber(obslist.length - 1, true);\r\n    //    size = scale*2;\r\n    size = scale * 1.8;\r\n    obs = new createjs.Bitmap(obsfolder + obslist[num]);\r\n    obs.scaleX = size;\r\n    obs.scaleY = size;\r\n    ypos = height - obs.getTransformedBounds().height;\r\n    space = randomNumber(ypos, false);\r\n    obs.y = space;\r\n    obs.name = \"item\";\r\n    return obs;\r\n}\r\n\r\nfunction manageObstacles() {\r\n    //this function manages the creation\r\n    //the movement and the removal of obstacles from the game environment\r\n    //if the number of ticks is perfectly divisible by the value of interval\r\n    //eg 7%3=1 where 6%3=0 google:modulo\r\n    if (timer.getTicks() % interval == 0) {\r\n        obstacle = createObstacle();\r\n        obstacle.x = width + 1;\r\n        obstacles.push(obstacle);\r\n        stage.addChildAt(obstacle, 0);\r\n    } else if (obstacles.length > 0) {\r\n        //check if there are any obstacles\r\n        //check all obstacles via \"obstacles\" array\r\n        for (i = 0; i < obstacles.length; i++) {\r\n            obs = obstacles[i];\r\n            pos = obs.x;\r\n            //get the width of the obstacle\r\n            obswidth = obs.getTransformedBounds().width;\r\n\r\n            //if obstacle is further than left edge of screen\r\n            if (pos > (width - width * 2) && isalive == true) {\r\n                //move it to the left\r\n                obstacles[i].x = pos - obspeed;\r\n                //if obstacle is cleared by the player\r\n                if (obstacles[i].x <= player.x) {\r\n                    //\r\n                    if (obs.name == \"item\" && isalive == true) {\r\n                        addScore();\r\n                        obs.name = \"remove\";\r\n                    }\r\n                }\r\n            } else if (pos < (obswidth * -1)) {\r\n                //if obstacle is not visible\r\n                //remove it from stage\r\n                //remove from list of obstacles on stage\r\n                stage.removeChild(obstacles.shift());\r\n            }\r\n            if (checkCollision(player, obs) != false) {\r\n                killPlayer();\r\n            }\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n//function to show or hide menu\r\nfunction showMenu(show, label) {\r\n    if (show == true) {\r\n        document.getElementById(\"restartbtn\").addEventListener(\"mousedown\", function () {\r\n            resetGame();\r\n        });\r\n        document.getElementById(\"restartbtn\").innerHTML = label;\r\n        document.getElementById(\"restart\").style.visibility = \"visible\";\r\n    } else {\r\n        document.getElementById(\"restart\").style.visibility = \"hidden\";\r\n    }\r\n\r\n}\r\n\r\nfunction checkCollision(obj1, obj2) {\r\n    var collision = ndgmr.checkPixelCollision(obj1, obj2, 0);\r\n    return collision;\r\n    // true or false\r\n}\r\n\r\n//////////////////////////scoring\r\nfunction showScore() {\r\n    //show a message on the top of screen in the div with id=\"score\"\r\n    document.getElementById(\"score\").innerHTML = score;\r\n    document.getElementById(\"highscore\").innerHTML = \"highscore=\" + highscore;\r\n}\r\n\r\n////saving high score\r\nfunction addScore() {\r\n    score++;\r\n    if (score >= highscore) {\r\n        highscore = score;\r\n    }\r\n    //we check score here and make game go faster\r\n    switch (score) {\r\n        case score > 10:\r\n            interval = 200;\r\n            break;\r\n        case score > 20:\r\n            interval = 150;\r\n            break;\r\n        case score > 40:\r\n            interval = 120;\r\n            break;\r\n    }\r\n    //update score display\r\n    showScore();\r\n}\r\n\r\nfunction saveScore() {\r\n    try {\r\n        window.localStorage.setItem(\"highest\", highscore);\r\n    } catch (err) {\r\n        console.log(\"error saving score \" + err);\r\n    }\r\n}\r\n///restore high score\r\nfunction readScore() {\r\n    try {\r\n        if (localStorage.length > 0) {\r\n            storedscore = window.localStorage.getItem(\"highest\");\r\n            highscore = storedscore;\r\n        }\r\n    } catch (err) {\r\n        console.log(\"error reading score \" + err);\r\n    }\r\n}\r\n//animate background\r\nvar bgposition = 0;\r\nfunction moveBackground(elm){\r\n    if (timer.getTicks() % 5 == 0) {\r\n        bgposition-=1;\r\n        var position=bgposition+\"px 0px\";\r\n        document.getElementById(elm).style.backgroundPosition=position; \r\n    }\r\n}\r\n//cordova stuff for the android app\r\ndocument.addEventListener(\"deviceready\", function () {\r\n    //listen to the back button on Android\r\n    document.addEventListener(\"back\", onBack);\r\n\r\n    function onBack() {\r\n        //save the score then exit app\r\n        saveScore();\r\n        navigator.app.exitApp();\r\n    }\r\n});\r\n"]}