{"version":3,"sources":["app.js","classes.js","functions.js"],"names":["windDirection","player","playerBounds","playerMovementRate","dropRate","playerAlive","stage","canvas","info","payLoads","Array","window","addEventListener","resizeCanvas","initApp","document","querySelector","windowWidth","clientWidth","canvasElement","clientHeight","initStage","setupPlayer","then","playerObj","x","y","scaleX","scaleY","getTransformedBounds","gotoAndPlay","addChild","update","getControlsConfig","config","event","code","console","log","drop","length","payload","createPayload","push","down","height","up","catch","timer","initTimer","on","innerText","framerate","toFixed","managePayLoads","getTicks","setWindDirection","changeWindIndicator","Payload","[object Object]","gameContainer","getElementById","containerHeight","containerWidth","setAttribute","canvasData","instance","width","elm","createjs","Stage","rate","Ticker","useRAF","loadImage","image","spriteSheetData","images","frames","animations","fly","dropping","dead","spriteSheet","SpriteSheet","animation","Sprite","err","playerDefault","url","Promise","resolve","reject","Image","src","request","XMLHttpRequest","overrideMimeType","onreadystatechange","rs","readyState","status","data","JSON","parse","responseText","open","send","pX","pY","rect","graphic","Graphics","beginFill","drawRect","Shape","payLoadsArray","gameCanvas","gameStage","forEach","origin","graphics","command","stageX","stageY","w","h","obj","shift","removeChild","createTarget","manageTargets","num","getRandom","elem","direction","classList","remove","add","limit","Math","round","random"],"mappings":"AAAA,IAAAA,cAAA,EACAC,OAAA,KACAC,aAAA,KACAC,mBAAA,GACAC,SAAA,EACAC,aAAA,EACAC,MAAA,KACAC,OAAA,KACAC,KAAA,KACAC,SAAA,IAAAC,MAGAC,OAAAC,iBAAA,SAAA,KACAL,OAAAM,iBAGAF,OAAAC,iBAAA,OAAA,KACAL,OAAAM,eACAC,UACAN,KAAAO,SAAAC,cAAA,SACA,MAAAC,EAAAF,SAAAC,cAAA,mBAAAE,YAEAC,GADAJ,SAAAC,cAAA,mBAAAI,aACAL,SAAAC,cAAA,iBACAV,MAAAe,UAAAF,GACAG,cACAC,KAAAC,IACAvB,OAAAuB,EACAvB,OAAAwB,EAAAR,EAAA,EACAhB,OAAAyB,EAAA,IACAzB,OAAA0B,OAAA,GACA1B,OAAA2B,OAAA,GACA1B,aAAAD,OAAA4B,uBACA5B,OAAA6B,YAAA,OACAxB,MAAAyB,SAAA9B,QACAK,MAAA0B,WAGAC,kBAAA,sBACAV,KAAAW,IACAA,GACAvB,OAAAC,iBAAA,UAAAuB,IACA,MAAAC,EAAAD,EAAAC,KAEA,GADAC,QAAAC,IAAAH,EAAAC,MACAA,GAAAF,EAAAK,MAEA,GAAA9B,SAAA+B,OAAA,EAAA,CACA,IAAAC,EAAAC,cAAAzC,QACAA,OAAA6B,YAAA,YACAxB,MAAAyB,SAAAU,GACAhC,SAAAkC,KAAAF,GACAxC,OAAA6B,YAAA,aAGAM,GAAAF,EAAAU,KACA3C,OAAAyB,EAAAzB,OAAAyB,EAAAnB,OAAAsC,OAAA3C,aAAA2C,OAAA5C,OAAAyB,EAAAvB,mBAAAF,OAAAyB,EAEAU,GAAAF,EAAAY,KACA7C,OAAAyB,EAAAzB,OAAAyB,EAAA,GAAAzB,OAAAyB,EAAAvB,mBAAAF,OAAAyB,OAMAqB,MAAA,QAGA,MAAAC,EAAAC,UAAA,IACAD,EAAAE,GAAA,OAAA,KACA1C,KAAA2C,UAAAH,EAAAI,UAAAC,QAAA,GACAC,eAAA7C,SAAAF,OAAAD,OACA0C,EAAAO,WAAA,KAAA,IACAvD,cAAAwD,mBACAC,oBAAA1C,SAAAC,cAAA,SAAAhB,gBAEAM,MAAA0B,aC1EA,MAAA0B,QACAC,gBCDA,SAAA7C,UACAO,YAGA,SAAAR,eAEA,MAAA+C,EAAA7C,SAAA8C,eAAA,kBACAC,EAAAF,EAAAxC,aACA2C,EAAAH,EAAA1C,YAEAX,EAAAQ,SAAA8C,eAAA,eAKA,OAJAtD,EAAAyD,aAAA,QAAAD,GACAxD,EAAAyD,aAAA,SAAAF,EAAA,GAEAG,WAAA,CAAAC,SAAA3D,EAAA4D,MAAAJ,EAAAlB,OAAAiB,GACAG,WAGA,SAAA5C,UAAA+C,GAGA,OADA,IAAAC,SAAAC,MAAAF,GAIA,SAAAnB,UAAAsB,GACA,MAAAvB,EAAAqB,SAAAG,OAGA,OAFAxB,EAAAyB,QAAA,EACAzB,EAAAI,UAAAmB,EACAvB,EAGA,SAAA1B,cACA,OAAAoD,UAAA,sCACAnD,KAAAoD,IACA,MAAAC,EAAA,CACAC,OAAA,CAAAF,GACAG,OAAA,CACAX,MAAA,IACAtB,OAAA,KAEAkC,WAAA,CACAC,IAAA,CAAA,EAAA,IACAC,SAAA,CAAA,IACAC,KAAA,CAAA,KAGAC,EAAA,IAAAd,SAAAe,YAAAR,GACAS,EAAA,IAAAhB,SAAAiB,OAAAH,EAAA,OAEA,OADA,IAAAd,SAAAiB,OAAAH,EAAAE,KAGAtC,MAAAwC,GACA,MAIA,SAAAC,iBAIA,SAAAd,UAAAe,GACA,OAAA,IAAAC,QAAA,CAAAC,EAAAC,KACA,MAAAjB,EAAA,IAAAkB,MACAlB,EAAA/D,iBAAA,OAAA,KACA+E,EAAAhB,KAEAA,EAAA/D,iBAAA,QAAA2E,GAAAK,EAAAL,IACAZ,EAAAmB,IAAAL,IAIA,SAAAxD,kBAAAwD,GAEA,OAAA,IAAAC,QAAA,CAAAC,EAAAC,KACA,MAAAG,EAAA,IAAAC,eACAD,EAAAE,iBAAA,aACAF,EAAAG,mBAAA,KACA,MAAAC,EAAAJ,EAAAK,WACA,GAAA,GAAAD,GAAA,GAAAA,EACA,GAAA,KAAAJ,EAAAM,OAAA,CACA,IAAAC,IAAAC,KAAAC,MAAAT,EAAAU,eAAAF,KAAAC,MAAAT,EAAAU,cACAd,EAAAW,QAGAV,GAAA,IAIAG,EAAAW,KAAA,MAAAjB,GACAM,EAAAY,SAIA,SAAAjE,cAAAzC,GAEA,MAAA2G,EAAA3G,EAAAwB,EACAoF,EAAA5G,EAAAyB,EACAoF,KAAA7G,EAAA4B,uBAEA,MAAAkF,GAAA,IAAA1C,SAAA2C,UACAC,UAAA,uBAAAC,SAAAN,EAAA,GAAAE,KAAA3C,MAAA0C,EAAA,GAAAC,KAAAjE,OAAA,GAAA,IAEA,OADA,IAAAwB,SAAA8C,MAAAJ,GAIA,SAAAzD,eAAA8D,EAAAC,EAAAC,GACAF,EAAAG,QACA9E,IACAA,EAAAhB,EAAAgB,EAAAhB,EAAAzB,cACAyC,EAAAf,EAAAe,EAAAf,EAAAtB,SAGA,IAAAoH,EAAA/E,EAAAgF,SAAAC,QACAC,EAAAH,EAAA/F,EAAAgB,EAAAhB,EACAmG,EAAAJ,EAAA9F,EAAAe,EAAAf,EACA,GAAAiG,EAAAN,EAAAlD,OAAAwD,EAAAH,EAAAK,EAAA,GAAAD,EAAAJ,EAAAM,EAAAT,EAAAxE,OAAA,CACA,IAAAkF,EAAAX,EAAAY,QACAV,EAAAW,YAAAF,MAOA,SAAAG,gBAIA,SAAAC,iBAIA,SAAA3E,mBACA,MAAA4E,EAAAC,UAAA,KACA,OAAAD,EAAA,GACA,EAEAA,GAAA,IAAAA,EAAA,GACA,EAEAA,GAAA,IAAAA,EAAA,IACA,GAGA,EAIA,SAAA3E,oBAAA6E,EAAAC,GACAA,EAAA,GACAD,EAAAE,UAAAC,OAAA,QACAH,EAAAE,UAAAE,IAAA,WAGAJ,EAAAE,UAAAC,OAAA,SACAH,EAAAE,UAAAE,IAAA,SAIA,SAAAL,UAAAM,GACA,OAAAC,KAAAC,MAAAD,KAAAE,SAAAH","file":"../main.min.js","sourcesContent":["let windDirection = 1;\r\nlet player = null;\r\nlet playerBounds = null;\r\nlet playerMovementRate = 10;\r\nlet dropRate = 4;\r\nlet playerAlive = true;\r\nlet stage = null;\r\nlet canvas = null;\r\nlet info = null;\r\nlet payLoads = new Array();\r\n\r\n//in case window gets resized\r\nwindow.addEventListener('resize', () => {\r\n  canvas = resizeCanvas();\r\n});\r\n\r\nwindow.addEventListener('load', () => {\r\n  canvas = resizeCanvas();\r\n  initApp();\r\n  info = document.querySelector('#info');\r\n  const windowWidth = document.querySelector('#game-container').clientWidth;\r\n  const windowHeight = document.querySelector('#game-container').clientHeight;\r\n  const canvasElement = document.querySelector('#main-canvas');\r\n  stage = initStage(canvasElement);\r\n  setupPlayer()\r\n    .then((playerObj) => {\r\n      player = playerObj;\r\n      player.x = windowWidth / 2;\r\n      player.y = 100;\r\n      player.scaleX = 0.3;\r\n      player.scaleY = 0.3;\r\n      playerBounds = player.getTransformedBounds();\r\n      player.gotoAndPlay('fly');\r\n      stage.addChild(player);\r\n      stage.update();\r\n    });\r\n\r\n  getControlsConfig('data/controls.json')\r\n    .then((config) => {\r\n      if (config) {\r\n        window.addEventListener('keydown', (event) => {\r\n          const code = event.code;\r\n          console.log(event.code)\r\n          if (code == config.drop) {\r\n            // console.log('dropping');\r\n            if (payLoads.length < 2) {\r\n              let payload = createPayload(player);\r\n              player.gotoAndPlay('dropping');\r\n              stage.addChild(payload);\r\n              payLoads.push(payload);\r\n              player.gotoAndPlay('fly');\r\n            }\r\n          }\r\n          else if (code == config.down) {\r\n            player.y = (player.y < (canvas.height - playerBounds.height) ) ? player.y + playerMovementRate: player.y;\r\n          }\r\n          else if (code == config.up) {\r\n            player.y = (player.y > 60)  ? player.y - playerMovementRate : player.y;\r\n          }\r\n        });\r\n        \r\n      }\r\n    })\r\n    .catch(() => { })\r\n\r\n  // initialise timer\r\n  const timer = initTimer(60);\r\n  timer.on('tick', () => {\r\n    info.innerText = timer.framerate.toFixed(2);\r\n    managePayLoads(payLoads, canvas, stage);\r\n    if(  timer.getTicks() % 100 == 0  ) {\r\n      windDirection = setWindDirection();\r\n      changeWindIndicator( document.querySelector('.wind'), windDirection ) \r\n    }\r\n    stage.update();\r\n  })\r\n})","class Payload {\r\n  constructor() {\r\n    \r\n  }\r\n}","function initApp() {\r\n  initStage();\r\n}\r\n\r\nfunction resizeCanvas() {\r\n  //get container width and height\r\n  const gameContainer = document.getElementById('game-container');\r\n  const containerHeight = gameContainer.clientHeight;\r\n  const containerWidth = gameContainer.clientWidth;\r\n  // set canvas width and height\r\n  const canvas = document.getElementById('main-canvas');\r\n  canvas.setAttribute('width', containerWidth);\r\n  canvas.setAttribute('height', (containerHeight - 5));\r\n  // return canvas object + data\r\n  canvasData = { \"instance\": canvas, \"width\": containerWidth, \"height\": containerHeight };\r\n  return canvasData;\r\n}\r\n\r\nfunction initStage(elm) {\r\n  // initialise canvas\r\n  const stage = new createjs.Stage(elm);\r\n  return stage;\r\n}\r\n\r\nfunction initTimer(rate) {\r\n  const timer = createjs.Ticker;\r\n  timer.useRAF = true;\r\n  timer.framerate = rate;\r\n  return timer;\r\n}\r\n\r\nfunction setupPlayer() {\r\n  return loadImage(\"assets/sprites/player/sprite2X.png\")\r\n    .then((image) => {\r\n      const spriteSheetData = {\r\n        images: [image],\r\n        frames: {\r\n          width: 400,\r\n          height: 300\r\n        },\r\n        animations: {\r\n          fly: [0, 49],\r\n          dropping: [49],\r\n          dead: [7]\r\n        }\r\n      };\r\n      const spriteSheet = new createjs.SpriteSheet(spriteSheetData);\r\n      const animation = new createjs.Sprite(spriteSheet, \"fly\");\r\n      const player = new createjs.Sprite(spriteSheet, animation);\r\n      return player;\r\n    })\r\n    .catch((err) => {\r\n      return null;\r\n    })\r\n}\r\n\r\nfunction playerDefault() {\r\n\r\n}\r\n\r\nfunction loadImage(url) {\r\n  return new Promise((resolve, reject) => {\r\n    const image = new Image();\r\n    image.addEventListener('load', () => {\r\n      resolve(image);\r\n    })\r\n    image.addEventListener('error', (err) => reject(err))\r\n    image.src = url;\r\n  })\r\n}\r\n\r\nfunction getControlsConfig(url) {\r\n  //return a promise\r\n  return new Promise((resolve, reject) => {\r\n    const request = new XMLHttpRequest();\r\n    request.overrideMimeType('text/json');\r\n    request.onreadystatechange = () => {\r\n      const rs = request.readyState;\r\n      if (rs == 4 || rs == 0) {\r\n        if (request.status == 200) {\r\n          let data = (JSON.parse(request.responseText)) ? JSON.parse(request.responseText) : false;\r\n          resolve(data)\r\n        }\r\n        else {\r\n          reject(false);\r\n        }\r\n      }\r\n    }\r\n    request.open('GET', url);\r\n    request.send();\r\n  })\r\n}\r\n\r\nfunction createPayload(player) {\r\n  // get player position\r\n  const pX = player.x;\r\n  const pY = player.y;\r\n  rect = player.getTransformedBounds();\r\n  // spawn a payload\r\n  const graphic = new createjs.Graphics()\r\n  .beginFill(\"hsl(143°, 12%, 44%)\").drawRect(pX + (rect.width * 0.7) , pY +  (rect.height * 0.7), 20, 10);\r\n  const load = new createjs.Shape(graphic);\r\n  return load;\r\n}\r\n\r\nfunction managePayLoads(payLoadsArray, gameCanvas, gameStage) {\r\n  payLoadsArray.forEach(\r\n    (payload) => {\r\n      payload.x = payload.x + windDirection;\r\n      payload.y = payload.y + dropRate;\r\n      // if payload is outside the canvas\r\n      // console.log( payload.localToGlobal(payload.x,payload.y) );\r\n      let origin = payload.graphics.command;\r\n      let stageX = origin.x + payload.x;\r\n      let stageY = origin.y + payload.y;\r\n      if (stageX > gameCanvas.width || stageX + origin.w < 0 || stageY + origin.h > gameCanvas.height) {\r\n        let obj = payLoadsArray.shift();\r\n        gameStage.removeChild(obj);\r\n        // console.log('payload removed');\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\nfunction createTarget() {\r\n\r\n}\r\n\r\nfunction manageTargets() {\r\n\r\n}\r\n\r\nfunction setWindDirection() {\r\n  const num = getRandom(100);\r\n  if( num < 25 ) {\r\n    return 2;\r\n  }\r\n  else if( num >=25 && num < 50 ) {\r\n    return 1;\r\n  }\r\n  else if( num >= 50 && num < 75 ) {\r\n    return -1;\r\n  }\r\n  else {\r\n    return -2;\r\n  }\r\n}\r\n\r\nfunction changeWindIndicator( elem, direction ) {\r\n  if( direction > 0 ) {\r\n    elem.classList.remove('left');\r\n    elem.classList.add('right');\r\n  }\r\n  else {\r\n    elem.classList.remove('right');\r\n    elem.classList.add('left');\r\n  }\r\n}\r\n\r\nfunction getRandom(limit) {\r\n  return Math.round(Math.random() * limit);\r\n}"]}